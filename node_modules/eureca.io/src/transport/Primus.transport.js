/// <reference path="../EObject.class.ts" />
/// <reference path="../Util.class.ts" />
/// <reference path="../Transport.ts" />
/// <reference path="../IServer.interface.ts" />
/// <reference path="../ISocket.interface.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/** @ignore */
var Eureca;
(function (Eureca) {
    var Transports;
    (function (Transports) {
        var PrimusTransport;
        (function (PrimusTransport) {
            if (Eureca.Util.isNodejs) {
                Primus = require('primus');
            }
            var Socket = (function (_super) {
                __extends(Socket, _super);
                //public webRTCChannel:any;
                //private wRTCPeer;
                function Socket(socket) {
                    _super.call(this);
                    this.socket = socket;
                    this.eureca = {};
                    this.request = socket.request;
                    this.id = socket.id;
                    //FIXME : with nodejs 0.10.0 remoteAddress of nodejs clients is undefined (this seems to be a engine.io issue)            
                    this.remoteAddress = socket.address;
                    //this.registerEvents(['open', 'message', 'error', 'close', 'reconnecting']);
                    this.bindEvents();
                }
                Socket.prototype.bindEvents = function () {
                    var _this = this;
                    this.socket.on('open', function () {
                        var args = arguments.length > 0 ? Array.prototype.slice.call(arguments, 0) : [];
                        args.unshift('open');
                        _this.trigger.apply(_this, args);
                    });
                    this.socket.on('data', function () {
                        var args = arguments.length > 0 ? Array.prototype.slice.call(arguments, 0) : [];
                        args.unshift('message');
                        _this.trigger.apply(_this, args);
                    });
                    this.socket.on('end', function () {
                        var args = arguments.length > 0 ? Array.prototype.slice.call(arguments, 0) : [];
                        args.unshift('close');
                        _this.trigger.apply(_this, args);
                    });
                    this.socket.on('error', function () {
                        var args = arguments.length > 0 ? Array.prototype.slice.call(arguments, 0) : [];
                        args.unshift('error');
                        _this.trigger.apply(_this, args);
                    });
                    this.socket.on('reconnecting', function () {
                        var args = arguments.length > 0 ? Array.prototype.slice.call(arguments, 0) : [];
                        args.unshift('reconnecting');
                        _this.trigger.apply(_this, args);
                    });
                };
                //public setupWebRTC()
                //{
                //    if (this.wRTCPeer) return;
                //    var _this = this;
                //    this.wRTCPeer = new Eureca.Transports.WebRTC.Peer();
                //    this.wRTCPeer.makeOffer(function(pc) {
                //        var webRTCSignalReq = {};
                //        webRTCSignalReq[Eureca.Protocol.signal] = pc.localDescription;
                //        _this.send(webRTCSignalReq);
                //    });
                //}
                Socket.prototype.isAuthenticated = function () {
                    return this.eureca.authenticated;
                };
                Socket.prototype.send = function (data /*, webRTC=false*/) {
                    //if (webRTC && this.webRTCChannel)
                    //{
                    //    this.webRTCChannel.send(data);
                    //    return;
                    //}
                    if (this.socket.send) {
                        this.socket.send(data);
                    }
                    else {
                        this.socket.write(data);
                    }
                };
                Socket.prototype.close = function () {
                    if (this.socket.end) {
                        this.socket.end();
                    }
                    else {
                        this.socket.close();
                    }
                };
                //deprecated ?
                Socket.prototype.onopen = function (callback) {
                    this.socket.on('open', callback);
                };
                Socket.prototype.onmessage = function (callback) {
                    this.socket.on('data', callback);
                };
                Socket.prototype.onclose = function (callback) {
                    this.socket.on('end', callback);
                };
                Socket.prototype.onerror = function (callback) {
                    this.socket.on('error', callback);
                };
                Socket.prototype.ondisconnect = function (callback) {
                    this.socket.on('reconnecting', callback);
                };
                return Socket;
            }(Eureca.EObject));
            PrimusTransport.Socket = Socket;
            var Server = (function () {
                function Server(primus) {
                    this.primus = primus;
                }
                //on client connect
                Server.prototype.onconnect = function (callback) {
                    this.primus.on('connection', function (psocket) {
                        var socket = new Socket(psocket);
                        //Eureca.Util.extend(iosocket, socket);
                        callback(socket);
                    });
                };
                return Server;
            }());
            PrimusTransport.Server = Server;
            var createServer = function (hook, options) {
                if (options === void 0) { options = {}; }
                try {
                    //var primusOptions: any = {};
                    options.pathname = options.prefix ? '/' + options.prefix : undefined;
                    var primus = new Primus(hook, options);
                    primus.save(__dirname + '/js/primus.js');
                    var server = new Server(primus);
                    return server;
                }
                catch (ex) {
                    if (ex.name == 'PrimusError' && ex.message.indexOf('Missing dependencies') == 0) {
                        console.error('Missing ', options.transformer);
                        process.exit();
                    }
                    else {
                        throw ex;
                    }
                }
            };
            var createClient = function (uri, options) {
                if (options === void 0) { options = {}; }
                options.pathname = options.prefix ? '/' + options.prefix : undefined;
                options.path = options.prefix ? '/' + options.prefix : undefined;
                var socket;
                if (Eureca.Util.isNodejs) {
                    //eioptions.transports = ['websocket', 'polling', 'flashsocket'];
                    //console.log('connecting to ', uri, options);
                    var CSocket = Primus.createSocket(options);
                    socket = new CSocket(uri);
                }
                else {
                    console.log('>>> Ezelia : createClient', uri, options);
                    socket = new Primus(uri, options);
                }
                var client = new Socket(socket);
                //(<any>client).send = socket.send;
                //socket.onopen = client.onopen;
                //Eureca.Util.extend(socket, client);
                return client;
            };
            Eureca.Transport.register('primus', '/js/primus.js', createClient, createServer);
        })(PrimusTransport = Transports.PrimusTransport || (Transports.PrimusTransport = {}));
    })(Transports = Eureca.Transports || (Eureca.Transports = {}));
})(Eureca || (Eureca = {}));
//# sourceMappingURL=Primus.transport.js.map